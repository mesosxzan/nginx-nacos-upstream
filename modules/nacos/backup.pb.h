/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.8 at Fri Aug  9 21:47:15 2024. */

#ifndef PB_BACKUP_PB_H_INCLUDED
#define PB_BACKUP_PB_H_INCLUDED
#include <pb/pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Config {
    uint64_t version;
    pb_callback_t content;
    pb_callback_t md5;
/* @@protoc_insertion_point(struct:Config) */
} Config;

typedef struct _Instance {
    pb_callback_t host;
    int32_t port;
    int32_t weight;
/* @@protoc_insertion_point(struct:Instance) */
} Instance;

typedef struct _Service {
    uint64_t version;
    pb_callback_t instances;
/* @@protoc_insertion_point(struct:Service) */
} Service;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Config_init_default                      {0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Instance_init_default                    {{{NULL}, NULL}, 0, 0}
#define Service_init_default                     {0, {{NULL}, NULL}}
#define Config_init_zero                         {0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Instance_init_zero                       {{{NULL}, NULL}, 0, 0}
#define Service_init_zero                        {0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Config_version_tag                       1
#define Config_content_tag                       2
#define Config_md5_tag                           3
#define Instance_host_tag                        1
#define Instance_port_tag                        2
#define Instance_weight_tag                      3
#define Service_version_tag                      1
#define Service_instances_tag                    2

/* Struct field encoding specification for nanopb */
extern const pb_field_t Config_fields[4];
extern const pb_field_t Instance_fields[4];
extern const pb_field_t Service_fields[3];

/* Maximum encoded size of messages (where known) */
/* Config_size depends on runtime parameters */
/* Instance_size depends on runtime parameters */
/* Service_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define BACKUP_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
